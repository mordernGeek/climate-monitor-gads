global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']  
  route:
    receiver: 'email'
    group_by: [alertname, job]
    group_wait: 10s
    group_interval: 5m
    repeat_interval: 4h
  receivers:
    - name: 'email'
  email_configs:
    - to: 'cloudteam@uplandengineering.com'  # This sends a mail to the email address
  send_resolved: true

scrape_configs:
  - job_name: 'my-app'
    static_configs:
      - targets: ['localhost:5000']  # To scrape the job on the python application
    metrics_path: '/metrics'  # The endpoint where your Flask app exposes Prometheus metrics
    relabel_configs:
      - source_labels: ['__meta__container_label_com_docker_compose_project']
        target_label: 'job'
      - source_labels: ['__meta__container_label_com_docker_compose_service']
        target_label: 'service'

  - job_name: 'health-check'
    metrics_path: '/probe'
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - 'localhost:5000/healthz'  # Replace with the health check endpoint of your Flask app
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115  # Replace with the address of your Blackbox Exporter

  - job_name: 'high-consumption'
    static_configs:
      - targets: ['localhost:5000']  # check for high consumption on the app
    metrics_path: '/metrics'  # The endpoint where your Flask app exposes Prometheus metrics
    metrics_relabel_configs:
      - source_labels: [__name__]
        regex: 'consumption'  
        action: keep
  - job_name: 'memory-leak'
    static_configs:
      - targets: ['localhost:5000']  # Check for memory leak on your Flask application
    metrics_path: '/metrics'  # The endpoint where your Flask app exposes Prometheus metrics
    metrics_relabel_configs:
      - source_labels: [__name__]
        regex: 'memory'  # metric for the memory leak detection
        action: keep




